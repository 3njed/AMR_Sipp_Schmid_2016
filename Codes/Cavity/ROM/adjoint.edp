include "../Common/intro.edp"
cout << "Re=" << Re << endl;
cout << "Number of unstable modes=" << unstable << endl;
	
real dt;
int nbre,step;
{
	ifstream file("../Common/param.dat");
	file >> nbre;		// number of time steps of simulation
	file >> dt;			// time step
	file >> step;		// number of time steps to define sampling time
};

string dir="sol_adj/";

string filename="adjoint.txt";
{
   	ofstream f(filename);
};

Uvvp [u1,u2,p],[rhs1,rhs2,rhs3];
Uvvp [up1,up2,pp];
Uvvp [upp1,upp2,ppp];
				
real a0,a1,a2,bet0,bet1;
a0=1./dt; a1=-1./dt; a2=0; bet0=1./dt; bet1=0;	// start with first-order time integration

Uvvp [ub1,ub2,pb];	// load base-flow
{
	ifstream file("../BF/cb_"+Re+".txt");
	file >> ub1[];
};

real nu=1./Re;
varf LNS([u1,u2,p],[v1,v2,q])	// Linearized Navier-Stokes operator. Fully implicit, no constraint on cfl number
= int2d(th)(
	a0*u1*v1+a0*u2*v2 
    + nu*(dx(u1)*dx(v1)+dy(u1)*dy(v1)+dx(u2)*dx(v2)+dy(u2)*dy(v2))
	+ v1*(u1*dx(ub1)+u2*dy(ub1)+ub1*dx(u1)+ub2*dy(u1))
	+ v2*(u1*dx(ub2)+u2*dy(ub2)+ub1*dx(u2)+ub2*dy(u2))
    - p*(dx(v1)+dy(v2))
    + q*(-dx(u1)-dy(u2)))
+ on(1,2,u1=0,u2=0)
+ on(1,2,4,6,u2=0);
matrix MatLNS=LNS(Uvvp,Uvvp);
MatLNS=MatLNS';	// discrete adjoint equations
set(MatLNS,solver=sparsesolver);

varf Mass([u1,u2,p],[v1,v2,q])	// Mass-matrix
= int2d(th)(u1*v1+u2*v2);
matrix MassMat=Mass(Uvvp,Uvvp,solver=CG);
		
real tps=0.;                                            

Uvvp<complex>[int] [ud,vd,pd](unstable);	// direct unstable modes
Uvvp<complex>[int] [ua,va,pa](unstable);	// adjoint unstable modes
		
// Read direct and adjoint global modes
for(int ii=0; ii<unstable; ii++)
{
	ifstream file("../Eigs/ev"+ii+".txt");
    file >> ua[ii][];
    ifstream file2("../Eigs/ea"+ii+".txt");
    file2 >> ud[ii][];
};

// Read measurement matrix
{	  
	ifstream file("../Sensor/c.txt");
	file >> rhs1[];
	varf Mass2([u1,u2,p],[v1,v2,q])
	= int2d(th)(u1*v1+u2*v2+p*q);
	matrix MassMat2=Mass2(Uvvp,Uvvp,solver=CG);
    u1[]=MassMat2^-1*rhs1[];	// Initial condition is MassMatrix^-1 times measurement matrix
};

rhs1[]=MassMat*u1[];
for(int ii=0; ii<unstable; ii++)	// Project measurement matrix on stable subspace
{
	real psr=ua[ii][].re'*rhs1[];
	real psi=ua[ii][].im'*rhs1[];
	u1[]-=(2.*psr)*ud[ii][].re;
	u1[]-=(2.*psi)*ud[ii][].im;
};
	
for (int i=1;i<=nbre; i++)	// time-loop
{
	cout << " tps = " << tps << endl;

	upp1[]=up1[];
	up1[]=MassMat*u1[];
	if(i==2)	// switch to second order in time
	{
		a0=1.5/dt; a1=-2./dt; a2=0.5/dt; bet0=2; bet1=-1;
		MatLNS=LNS(Uvvp,Uvvp);
        MatLNS=MatLNS';	// discrete adjoint equations
        set(MatLNS,solver=sparsesolver);
	}
				
	rhs1[]=-a1*up1[]-a2*upp1[];		// build right-hand-side
	u1[]=MatLNS^-1*rhs1[];			// compute new flowfield
	tps+=dt;						// advance time-step

    rhs1[]=MassMat*u1[];	// compute energy of state
    real nrj=u1[]'*rhs1[];
	{
		ofstream f(filename,append);
		f.precision(16);
 		f << tps << "   " << nrj << endl; 
	};
			
    if((i%step)==1)
	{
		ofstream file(dir+"adj_"+(100000+i)+"_.txt");
        file.precision(16);
        file << u1[] << endl;
	};
};
